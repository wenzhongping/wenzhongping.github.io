<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx</title>
      <link href="/2020/06/21/nginx/"/>
      <url>/2020/06/21/nginx/</url>
      
        <content type="html"><![CDATA[<h1><span id="nginx从入门到精通">Nginx从入门到精通</span></h1><h2><span id="第一章-nginx简介以及安装">第一章  Nginx简介以及安装</span></h2><h3><span id="11-nginx由来">1.1 Nginx由来</span></h3><p>Nginx是一个web应用及反向代理工具，由一名俄罗斯程序员(Igor)发明的。NGINX是一个免费的，开源的高性能HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 NGINX以其高性能，稳定性，丰富的功能集，简单的配置和低资源消耗而闻名。</p><h3><span id="12-nginx特点">1.2 Nginx特点</span></h3><p>主要有三大应用场景：</p><ul><li>静态资源服务 （web静态网页）</li><li>反向代理服务（缓存，负载均衡）</li><li>API服务（OpenResty）</li></ul><h3><span id="13-nginx优势">1.3 Nginx优势</span></h3><ul><li><p>更快，单次请求更快，高峰期也更快</p></li><li><p>高扩展性，极具扩展性，它由多个不同功能、不同层次、不同类型且耦合度极高的模块组成，这种低耦合的设计，造就了它庞大的第三方模块</p></li><li><p>高可靠性，每个worker进程相对独立，master进程在某个worker进程出错时能迅速拉起新的worker进程nginx的可靠性来源于其核心框架代码的优秀设计、模块设计的简单性。</p></li><li><p>低内存消耗，一般情况下10000个非活跃的keep-alive连接仅消耗2.5M的内存</p></li><li><p>单机支持10万以上的并发连接</p></li><li><p>热部署</p></li></ul><h3><span id="14-nginx安装centos">1.4 Nginx安装(centos)</span></h3><p>（1）直接通过yum安装</p><pre><code class="bash">yum install -y  nginx</code></pre><p>（2）通过编译安装</p><pre><code class="bash"># 更换阿里cento7的yum源（可选）yum list wget# 若没有安装wgetyum -y install wget# 首先备份原版/etc/yum.repos.d/CentOS-Base.repocd /etc/yum.repos.d mv CentOS-Base.repo CentOS-Base.repo.bak # 下载阿里yum源 wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo #运行yum makecache生成缓存 yum clean allyum makecache# 安装nginx依赖yum -y install gcc gcc-c++ autoconf automake make yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel# 添加www用户groupadd -f wwwuseradd -g www www# 创建一个目录并切换mkdir nginxcd nginx# 下载nginxwget http://nginx.org/download/nginx-1.18.0.tar.gz# 解压tar -zxvf nginx-1.18.0.tar.gz# 配置nginxcd nginx-1.18.0# 安装依赖yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel# 编译安装./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-stream --with-http_gzip_static_module --with-http_sub_module --with-http_v2_module</code></pre><img src="/2020/06/21/nginx/image-20200620224324492.png" class title="image-20200620224324492"><pre><code class="bash"># 出现以上可以开始编译安装make &amp;&amp; make install</code></pre><p>安装成功，刚刚通过./configure –prefix=/usr/local/nginx指定安装在/usr/local/nginx</p><pre><code class="bash">#查看启动情况ps -ef|grep nginx#查看是否启动成功curl 127.0.0.1#查看端口情况lsof -i :80COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEnginx   25363 root    6u  IPv4  73747      0t0  TCP *:http (LISTEN)nginx   25365  www    6u  IPv4  73747      0t0  TCP *:http (LISTEN)</code></pre><p>添加到系统环境变量</p><pre><code class="bash">vim /lib/systemd/system/nginx.service# 加入如下内容[Unit]Description=nginxAfter=network.target[Service]Type=forkingExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.targetvim /etc/profile # 加入以下内容export NGINX_HOME=/usr/local/nginxexport PATH=$PATH:$NGINX_HOME/sbin# 执行source /etc/profile</code></pre><pre><code class="bash">#启动nginx服务systemctl start nginx# 开机自启systemctl enable nginx#快速停止服务nginx -s stop# 优雅退出nginx  -s quit#检查配置文件nginx -t#重新加载配置nginx -s reload # 查看版本nginx -v</code></pre><h2><span id="第二章-常见nginx配置">第二章 常见Nginx配置</span></h2><h3><span id="21-nginx日志">2.1 nginx日志</span></h3><p>（1）access log配置</p><pre><code class="bash">access_log /var/log/access_log.gz combined gzip flush=5m;# 指定外部log日志服务器access_log syslog:server=192.168.1.10 debug;# /var/log/access_log.gz 存放日志的路径，默认是logs/access.log# gzip 压缩日志# flush=5m 5分钟写入硬盘一次# 使用默认combined格式记录日志</code></pre><p>(2) 日志切割</p><pre><code class="bash"># 备份之前日志mv access_log.log access_log.back.log# 切割日志nginx -s reopen</code></pre><h3><span id="22-热部署">2.2 热部署</span></h3><p>热升级：</p><pre><code class="bash"># 1.备份原执行文件nginx 为nginx.oldmv /usr/local/nginx/sbin/nginx  /usr/local/nginx/sbin/nginx.old# 2.将新编译好的nginx执行文件拷过来# 下载新版本并编译安装过程参考1.4，安装目录不能与旧版本路径一样cp /usr/local/nginx-19/sbin/nginx  /usr/local/nginx/sbin/nginx# 3.向nginx主进程发送USR2 信号，通知nginx要对它进行升级ps -ef  | grep nginx</code></pre><img src="/2020/06/21/nginx/image-20200621163132648.png" class title="image-20200621163132648"><pre><code class="bash">#  6579是旧的主进程号 kill -USR2 6579 kill -WINCH 6579 # 确定没问题再quit 6579进程 kill -QUIT 6579 ps -ef  | grep nginx #查看版本 nginx -v</code></pre><img src="/2020/06/21/nginx/image-20200621163952054.png" class title="image-20200621163952054"><p>回滚操作</p><pre><code class="bash"># 1.恢复旧的二进制文件mv /usr/local/nginx/sbin/nginx.old  /usr/local/nginx/sbin/nginx# 2.退出新版本nginx进程kill -HUP 19857kill -QUIT 19857# 查看版本nginx -v# 指定配置文件为旧版本所用配置文件nginx -c /usr/local/nginx/conf/nginx.conf# 重新加载nginx -s reload</code></pre><h3><span id="23-缓存">2.3 缓存</span></h3><h2><span id="第三章-nginx优化">第三章 Nginx优化</span></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群-负载均衡</title>
      <link href="/2020/06/20/%E9%9B%86%E7%BE%A4-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2020/06/20/%E9%9B%86%E7%BE%A4-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s实战</title>
      <link href="/2020/06/20/k8s%E5%AE%9E%E6%88%98/"/>
      <url>/2020/06/20/k8s%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker实战</title>
      <link href="/2020/06/20/docker%E5%AE%9E%E6%88%98/"/>
      <url>/2020/06/20/docker%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库运维</title>
      <link href="/2020/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/"/>
      <url>/2020/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDC网络运维</title>
      <link href="/2020/06/20/IDC%E7%BD%91%E7%BB%9C%E8%BF%90%E7%BB%B4/"/>
      <url>/2020/06/20/IDC%E7%BD%91%E7%BB%9C%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux运维常用命令</title>
      <link href="/2020/06/20/linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/06/20/linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="linux-常用命令">linux 常用命令</span></h1><pre><code class="bash">$ hexo new "My New Post"</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/19/hello-world/"/>
      <url>/2020/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3><span id="run-server">Run server</span></h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
