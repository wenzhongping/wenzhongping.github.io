<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx</title>
      <link href="/2020/06/22/nginx/"/>
      <url>/2020/06/22/nginx/</url>
      
        <content type="html"><![CDATA[<h1><span id="nginx从入门到精通">Nginx从入门到精通</span></h1><h2><span id="第一章-nginx简介以及安装">第一章  Nginx简介以及安装</span></h2><h3><span id="11-nginx由来">1.1 Nginx由来</span></h3><p>Nginx是一个web应用及反向代理工具，由一名俄罗斯程序员(Igor)发明的。NGINX是一个免费的，开源的高性能HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 NGINX以其高性能，稳定性，丰富的功能集，简单的配置和低资源消耗而闻名。</p><h3><span id="12-nginx特点">1.2 Nginx特点</span></h3><p>主要有三大应用场景：</p><ul><li>静态资源服务 （web静态网页）</li><li>反向代理服务（缓存，负载均衡）</li><li>API服务（OpenResty）</li></ul><h3><span id="13-nginx优势">1.3 Nginx优势</span></h3><ul><li><p>更快，单次请求更快，高峰期也更快</p></li><li><p>高扩展性，极具扩展性，它由多个不同功能、不同层次、不同类型且耦合度极高的模块组成，这种低耦合的设计，造就了它庞大的第三方模块</p></li><li><p>高可靠性，每个worker进程相对独立，master进程在某个worker进程出错时能迅速拉起新的worker进程nginx的可靠性来源于其核心框架代码的优秀设计、模块设计的简单性。</p></li><li><p>低内存消耗，一般情况下10000个非活跃的keep-alive连接仅消耗2.5M的内存</p></li><li><p>单机支持10万以上的并发连接</p></li><li><p>热部署</p></li></ul><h3><span id="14-nginx安装centos">1.4 Nginx安装(centos)</span></h3><p>（1）直接通过yum安装</p><pre><code class="bash">yum install -y  nginx</code></pre><p>（2）通过编译安装</p><pre><code class="bash"># 更换阿里cento7的yum源（可选）yum list wget# 若没有安装wgetyum -y install wget# 首先备份原版/etc/yum.repos.d/CentOS-Base.repocd /etc/yum.repos.d mv CentOS-Base.repo CentOS-Base.repo.bak # 下载阿里yum源 wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo #运行yum makecache生成缓存 yum clean allyum makecache# 安装nginx依赖yum -y install gcc gcc-c++ autoconf automake make yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel# 添加www用户groupadd -f wwwuseradd -g www www# 创建一个目录并切换mkdir nginxcd nginx# 下载nginxwget http://nginx.org/download/nginx-1.18.0.tar.gz# 解压tar -zxvf nginx-1.18.0.tar.gz# 配置nginxcd nginx-1.18.0# 安装依赖yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel# 编译安装./configure --user=www --group=www --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-stream --with-http_gzip_static_module --with-http_sub_module --with-http_v2_module</code></pre><img src="/2020/06/22/nginx/image-20200620224324492.png" class title="image-20200620224324492"><pre><code class="bash"># 出现以上可以开始编译安装make &amp;&amp; make install</code></pre><p>安装成功，刚刚通过./configure –prefix=/usr/local/nginx指定安装在/usr/local/nginx</p><pre><code class="bash">#查看启动情况ps -ef|grep nginx#查看是否启动成功curl 127.0.0.1#查看端口情况lsof -i :80COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAMEnginx   25363 root    6u  IPv4  73747      0t0  TCP *:http (LISTEN)nginx   25365  www    6u  IPv4  73747      0t0  TCP *:http (LISTEN)</code></pre><p>添加到系统环境变量</p><pre><code class="bash">vim /lib/systemd/system/nginx.service# 加入如下内容[Unit]Description=nginxAfter=network.target[Service]Type=forkingExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.targetvim /etc/profile # 加入以下内容export NGINX_HOME=/usr/local/nginxexport PATH=$PATH:$NGINX_HOME/sbin# 执行source /etc/profile</code></pre><pre><code class="bash">#启动nginx服务systemctl start nginx# 开机自启systemctl enable nginx#快速停止服务nginx -s stop# 优雅退出nginx  -s quit#检查配置文件nginx -t#重新加载配置nginx -s reload # 查看版本nginx -v</code></pre><h2><span id="第二章-常见nginx配置">第二章 常见Nginx配置</span></h2><h3><span id="21-nginx日志">2.1 nginx日志</span></h3><p>（1）access log配置</p><pre><code class="bash">access_log /var/log/access_log.gz combined gzip flush=5m;# 指定外部log日志服务器access_log syslog:server=192.168.1.10 debug;# /var/log/access_log.gz 存放日志的路径，默认是logs/access.log# gzip 压缩日志# flush=5m 5分钟写入硬盘一次# 使用默认combined格式记录日志</code></pre><p>(2) 日志切割</p><pre><code class="bash"># 备份之前日志mv access_log.log access_log.back.log# 切割日志nginx -s reopen</code></pre><h3><span id="22-热部署">2.2 热部署</span></h3><p>热升级：</p><pre><code class="bash"># 1.备份原执行文件nginx 为nginx.oldmv /usr/local/nginx/sbin/nginx  /usr/local/nginx/sbin/nginx.old# 2.将新编译好的nginx执行文件拷过来# 下载新版本并编译安装过程参考1.4，安装目录不能与旧版本路径一样cp /usr/local/nginx-19/sbin/nginx  /usr/local/nginx/sbin/nginx# 3.向nginx主进程发送USR2 信号，通知nginx要对它进行升级ps -ef  | grep nginx</code></pre><img src="/2020/06/22/nginx/image-20200621163132648.png" class title="image-20200621163132648"><pre><code class="bash">#  向老进程发送USR2信号，告诉老进程升级 kill -USR2 6579 # 向老进程发送退出老work信号  kill -WINCH 6579 # 确定没问题再quit 老进程（6579进程） kill -QUIT 6579 ps -ef  | grep nginx #查看版本 nginx -v</code></pre><img src="/2020/06/22/nginx/image-20200621163952054.png" class title="image-20200621163952054"><p>回滚操作</p><pre><code class="bash"># 1.恢复旧的二进制文件mv /usr/local/nginx/sbin/nginx.old  /usr/local/nginx/sbin/nginx# 2.退出新版本nginx进程kill -HUP 19857kill -QUIT 19857# 查看版本nginx -v# 指定配置文件为旧版本所用配置文件nginx -c /usr/local/nginx/conf/nginx.conf# 重新加载nginx -s reload</code></pre><h3><span id="23-web应用">2.3 web应用</span></h3><p>nginx.conf配置中隐藏版本号</p><pre><code class="bash"> # 隐藏版本号     server_tokens off;</code></pre><p>进入nginx配置文件夹</p><img src="/2020/06/22/nginx/image-20200621174446530.png" class title="image-20200621174446530"><p>主要配置在nginx.conf,一般不去修改此文件，我们可以再新建一个文件夹用于存放后续http模块配置，把该文件夹引入到nginx.conf配置文件中的http体内</p><pre><code class="bash">mkdir conf.d# 在nginx.conf中引入配置文件vim nginx.confinclude  /usr/local/nginx/conf/conf.d/*.conf:wq</code></pre><pre><code class="bash">#  新建一个html建测试页面touch /usr/local/nginx/www/index.htmlecho "hello word" &gt;&gt; /usr/local/nginx/www/index.html# 进入/usr/local/nginx/conf/conf.d新增配置文件cd /usr/local/nginx/conf/conf.dvim www.test.confserver {    listen      80;    # 若有域名则写域名，可以根据域名来转发到不同页面    server_name  localhost;# 访问日志配置    access_log  /var/log/index.access.log  main;# 网页文件所在路径    root   /usr/local/nginx/www/;# 访问/目录时显示index.html页面    location / {          index  index.html index.htm;    }    }# 测试curl 127.0.0.1:8080</code></pre><h4><span id="root-和-alias-的区别">root   和 alias 的区别:</span></h4><p>(1)</p><pre><code class="bash">location /images/ {       root "/app/webroot"}访问： http://www.test.com/images/a.jpg  相当于文件系统路径 /app/webroot/images/a.jpg </code></pre><p>(2)</p><pre><code class="bash">location  /images/ {      alias  "/www/pictures/"; }访问： http://www.test.com/images/a.jpg  相当于文件系统路径/www/pictures/a.jpg </code></pre><h4><span id="https-配置-以及访问http强制跳转到-https">https 配置 以及访问http强制跳转到 https</span></h4><p>https的配置</p><pre><code class="bash"># 若有阿里云域名可以免费生成https证书# 把生成好的证书下载并解压到指定目录# 在之前配置的基础上新增监听443端口cd /usr/local/nginx/conf/conf.dvim www.test.confserver {    listen      80;    # 若有域名则写域名，可以根据域名来转发到不同页面    server_name  localhost;# 访问日志配置    access_log  /var/log/index.access.log  main;# 网页文件所在路径    root   /usr/local/nginx/www/;    # 新增监听443端口配置listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。  #/etc/nginx/key/4094309_www.test.pem为证书所在目录。  ssl_certificate /etc/nginx/key/4094309_www.test.com.pem; #/etc/nginx/key/4094309_www.test.com.key为key所在目录ssl_certificate_key /etc/nginx/key/4094309_www.test.com.key;  ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。ssl_prefer_server_ciphers on;# 访问/目录时显示index.html页面    location / {          index  index.html index.htm;    }  # 客户端访问http强制跳转到https  if ($ssl_protocol = "") { return 301 https://$host$request_uri; }   }</code></pre><h4><span id="rewire">rewire</span></h4><h5><span id="正则匹配">正则匹配</span></h5><h6><span id="元字符">元字符</span></h6><ul><li>. 匹配除换行符以外的任意字符</li><li>\w 匹配字母或数字或下划线或汉字</li><li>\s 匹配任意的空白符</li><li>\d 匹配数字</li><li>^ 匹配字符串开始</li><li>$匹配字符串结束</li></ul><h6><span id="重复">重复</span></h6><ul><li>“*”重复零次或更多次</li><li>“+”重复一次或更多次</li><li>“？”重复零次或一次</li><li>“{n}”重复n次</li><li>“{n,}”重复n或更多次</li><li>“{n,m}”重复n到m次</li></ul><p>比较常用的location匹配</p><pre><code class="bash">#uri包含/static即可匹配中location ^~ /static/ {root /webroot/static/;}# uri以.(gif|jpg|jpeg|png|css|js|ico)结尾location ~* .(gif|jpg|jpeg|png|css|js|ico)$ {root /webroot/res/;}# 匹配全部location  ~.*^ {root /webroot/res/;}</code></pre><p>防盗链技术</p><p>简单有效的防盗链手段：referer模块</p><p>场景：</p><p>某网站通过url引用了你的页面，当用户在浏览器上点击 url时，http请求的头部中会通过 referer头部，将该网站当前页面的url带上，告诉服务器本次请求 是 由这个页面发起的</p><pre><code class="bash"># referer模块指令# invalid_referer 允许访问时变量为空 ，不允许访问时变量值为1# 例子：常见的图片视频防盗链location ~* .(gif|jpg|png|swf|flv)$ {# 通过浏览器直接打开会有referer信息，也就是valid_referers值为1# none 代表没有referer#  blocked 代表有referer但是被防火墙或者是代理给去除了# www.wosoquan.com wosoquan.com  nginx会通过正则匹配，匹配到以上字符串值为0，否则为1valid_referers none blocked www.test.com test.com ;if ($invalid_referer) {# 若用户直接盗链接打开，则跳转至http://www.test.com/retrun.htmlrewrite ^/ http://www.test.com/retrun.html;#return 403;}}</code></pre><p><code>proxy_set_header</code>和<code>add_header</code>的区别</p><p>区别：<code>proxy_set_header</code>是<code>Nginx</code>设置请求头信息给上游服务器，<code>add_header</code>是<code>Nginx</code>设置响应头信息给浏览器。</p><ul><li><p>proxy_set_header</p><p>假如<code>Nginx</code>请求上游服务器时，添加额外的请求头，就需要使用proxy_set_header</p><p>例如：<code>proxy_set_header X-Request-URI $scheme://$host/$uri;</code></p></li><li><p>add_header</p><p><code>Nginx</code>响应数据时，要告诉浏览器一些头信息，就要使用<code>add_header</code>。例如跨域访问</p></li></ul><p>新增http头部信息</p><pre><code class="bash">server {#添加一个自定义头部信息add_header  server:test;# 插入X-Forward-For到 下游服务器proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;#插入X-Real-IP远端真实ipproxy_set_header X-Real-IP $remote_addr;}</code></pre><p>X-Forward-For 与X-Real-IP区别</p><ul><li>HTTP 头部X-Forward-For用户传递IP</li><li>HTTP 头X-Real-IP用户传递用户 IP</li></ul><img src="/2020/06/22/nginx/image-20200622141513297.png" class title="image-20200622141513297"><h3><span id="24反向代理负载均衡">2.4反向代理负载均衡</span></h3><p>如何理解反向代理？<br>Nginx是反向代理服务器，我们可以从下面的图来理解为什么是反向代理。以Nginx为中心，数据的流向是从Server到Nginx再到Client，注意我说的是数据（响应数据），而不是请求。我们都知道水流一定是从上游流到下游，所以给Server一个别称上游服务器，当然这个别称并不是我定义的。</p><img src="/2020/06/22/nginx/image-20200622135224719.png" class title="image-20200622135224719"><h3><span id="25-缓存">2.5 缓存</span></h3><pre><code class="bash"># nginx缓存空间配置，该配置定义在nginx配置文件的server上方即可proxy_cache_path /etc/nginx/cachefiles levels=1:2 keys_zone=cache:10m max_size=100m inactive=60m use_temp_path=off;</code></pre><ul><li><p>proxy cache_path 缓存内容存放的目录文件</p></li><li><p>levels=1:2 Nginx为将要缓存的资源生成的key为f4cd0fbc769e94925ec5540b6a4136d0，那么key的最后一位0，以及倒数第2-3位6d作为两级的子目录，也就是该资源最终会被缓存到/path/to/cache/0/6d目录中</p></li><li><p>keys_zone 在共享内存中设置一块存储区域来存放缓存的key和metadata（类似使用次数），这样nginx可以快速判断一个request是否命中或者未命中缓存，1m可以存储8000个key，10m可以存储80000个key</p></li><li><p>max_size最大cache空间，如果不指定，会使用掉所有disk space，当达到配额后，会删除最少使用的cache文件</p></li><li><p>inactive未被访问文件在缓存中保留时间，本配置中如果60分钟未被访问则不论状态是否为expired，缓存控制程序会删掉文件</p></li><li><p>use_temp_path  #如果为off，则nginx会将缓存文件直接写入指定的cache文件中，而不是使用temp_path存储，官方建议为off，避免文件在不同文件系统中不必要的拷贝</p></li></ul><pre><code class="bash"># 在 location中应用缓存location / {# 设置上面定义的zoom名字proxy_cache cache# 设置缓存的Key值proxy_cache_key $scheme$proxy_host$request_uri; # cache记录保存时间为1天 proxy_cache_valid any 1d;# 设置绕过缓存的请求url，即url中包含该配置的值，则该请求不从缓存中获取数据，非必须配置proxy_cache_bypass $arg_noCache;#设置当这两个参数值为true时，不缓存proxy_cache_bypass $cookie_nocache $arg_nocache;# 此处是托底配置，旧的总比出错强，当nginx请求后台服务器报错的时候，如果返回配置的错误响应码，nginx则直接取缓存文件中的旧数据返回给用户proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;# 缓存并发锁，当nginx缓存没有命中的时候只有一个请求回源后端服务器请求数据，其他请求会等待proxy_cache_lock on;#等待锁超时时间设置proxy_cache_lock_timeout 1s;# proxy_cache_revalidate命令被启用，NGINX检测得知当前的缓存内容依然有效（If-Modified-Since或者If-None-Match）proxy_cache_revalidate on;#允许在后台发送子请求来更新过期的缓存文件proxy_cache_background_update on;#指定该虚拟服务器下什么类型的HTTP方法可以被缓存proxy_cache_methods GET HEAD;#设置某内容被N次请求后，Nginx缓存该内容。proxy_cache_min_uses 1;# 插入头部信息查看缓存状态 add_header X-Cache-Status $upstream_cache_status;}</code></pre><p>分块传输技术</p><p>Nginx的slice模块可以将一个请求分解成多个子请求，每个子请求返回响应内容的一个片段，让大文件的缓存更有效率。</p><pre><code class="bash">location / {slice     1m;proxy_set_header Range $slice_range;}</code></pre><h2><span id="第三章-nginx优化">第三章 Nginx优化</span></h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群-负载均衡</title>
      <link href="/2020/06/20/%E9%9B%86%E7%BE%A4-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2020/06/20/%E9%9B%86%E7%BE%A4-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s实战</title>
      <link href="/2020/06/20/k8s%E5%AE%9E%E6%88%98/"/>
      <url>/2020/06/20/k8s%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker实战</title>
      <link href="/2020/06/20/docker%E5%AE%9E%E6%88%98/"/>
      <url>/2020/06/20/docker%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库运维</title>
      <link href="/2020/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/"/>
      <url>/2020/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDC网络运维</title>
      <link href="/2020/06/20/IDC%E7%BD%91%E7%BB%9C%E8%BF%90%E7%BB%B4/"/>
      <url>/2020/06/20/IDC%E7%BD%91%E7%BB%9C%E8%BF%90%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux运维常用命令</title>
      <link href="/2020/06/20/linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/06/20/linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="linux-常用命令">linux 常用命令</span></h1><pre><code class="bash">$ hexo new "My New Post"</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/19/hello-world/"/>
      <url>/2020/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3><span id="run-server">Run server</span></h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
